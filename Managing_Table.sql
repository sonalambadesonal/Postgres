-- Data Types

-- CREATE TABLE

CREATE TABLE IF NOT EXISTS account(
	user_id SERIAL PRIMARY KEY,
	user_name VARCHAR(50) UNIQUE NOT NULL,
	password VARCHAR(50) NOT NULL,
	email VARCHAR(255) UNIQUE NOT NULL,
	created_on TIMESTAMP NOT NULL,
	last_login TIMESTAMP
);

CREATE TABLE roles(
	role_id SERIAL PRIMARY KEY,
	role_name VARCHAR(255) UNIQUE NOT NULL
);

DROP TABLE IF EXISTS roles;

CREATE TABLE account_roles(
	user_id INT NOT NULL,
	role_id INT NOT NULL,
	grant_date TIMESTAMP,
	PRIMARY KEY (user_id, role_id),
	FOREIGN KEY(role_id)
		REFERENCES roles (role_id),
	FOREIGN KEY (user_id)
		REFERENCES account (user_id)
);

-- SELECT INTO
SELECT title,film_id, rental_duration
INTO TABLE film_r
FROM film
WHERE rating = 'R' AND rental_duration = 5
ORDER BY title;

SELECT * FROM film_r;

SELECT film_id, title, length
INTO TEMP TABLE short_film
FROM film
WHERE length < 60;

SELECT * FROM short_film;

-- CREATE TABLE AS

CREATE TABLE action_film AS
SELECT film_id,
		title,
		release_year,
		length,
		rating
FROM film INNER JOIN film_category USING(film_id)
WHERE category_id = 1;

SELECT * FROM action_film;

CREATE TABLE IF NOT EXISTS film_rating(rating_film, film_count)
AS SELECT rating, COUNT(film_id)
FROM film
GROUP BY rating;

SELECT * FROM film_rating;

-- SERIAL

CREATE TABLE fruits(
	id SERIAL PRIMARY KEY,
	name VARCHAR NOT NULL
);

INSERT INTO fruits(name)
VALUES('Orange');

INSERT INTO fruits(id, name)
VALUES(DEFAULT, 'APPLE');

SELECT * FROM fruits;

SELECT currval(pg_get_serial_sequence('fruits', 'id'));

INSERT INTO fruits(name)
VALUES('Grapes')
RETURNING id;

-- Sequences

CREATE SEQUENCE mysequence
INCREMENT 5
START 100;

SELECT nextval('mysequence');

CREATE SEQUENCE IF NOT EXISTS three
INCREMENT -1
MINVALUE 1
MAXVALUE 3
START 3
CYCLE;

SELECT nextval('three');

CREATE SEQUENCE IF NOT EXISTS nocycle
INCREMENT -1
MINVALUE 1
MAXVALUE 3
START 3;

SELECT nextval('nocycle');

DROP TABLE IF EXISTS order_details;
CREATE TABLE order_details(
	order_id SERIAL,
	item_id INT NOT NULL,
	item_text VARCHAR NOT NULL,
	price DEC(10, 2) NOT NULL,
	PRIMARY KEY(order_id, item_id)
);

CREATE SEQUENCE order_item_id
START 10
INCREMENT 10
MINVALUE 10
OWNED BY order_details.item_id;

INSERT INTO order_details(order_id, item_id, item_text, price)
VALUES (100, nextval('order_item_id'),'DVD Player',100),
    (100, nextval('order_item_id'),'Android TV',550),
    (100, nextval('order_item_id'),'Speaker',250);
	
SELECT * FROM order_details;

SELECT relname sequence_name
FROM pg_class
WHERE relkind = 'S';

DROP TABLE order_details;

-- Identity Column

DROP TABLE IF EXISTS color;
CREATE TABLE color(
	color_id INT GENERATED ALWAYS AS IDENTITY,
	color_name VARCHAR NOT NULL
);

INSERT INTO color(color_name)
VALUES('Red');

SELECT * FROM color;

INSERT INTO color(color_id, color_name)
OVERRIDING SYSTEM VALUE
VALUES(3, 'Green');

DROP TABLE IF EXISTS color;
CREATE TABLE color(
	color_id INT GENERATED BY DEFAULT AS IDENTITY,
	color_name VARCHAR NOT NULL
);

INSERT INTO color(color_name)
VALUES('White');


SELECT * FROM color;

INSERT INTO color(color_id, color_name)
VALUES (2, 'Red');

DROP TABLE IF EXISTS color;
CREATE TABLE color(
	color_id INT GENERATED BY DEFAULT AS IDENTITY
	(START WITH 100 INCREMENT BY 10),
	color_name VARCHAR NOT NULL
);

INSERT INTO color(color_name)
VALUES ('Orange');

SELECT * FROM color;

INSERT INTO color(color_name)
VALUES ('Purple');

CREATE TABLE shape(
	shape_id INT NOT NULL,
	shape_name VARCHAR NOT NULL
);

ALTER TABLE shape
ALTER COLUMN shape_id ADD GENERATED ALWAYS AS IDENTITY;

ALTER TABLE shape
ALTER COLUMN shape_id SET GENERATED BY DEFAULT;

ALTER TABLE shape
ALTER COLUMN shape_id
DROP IDENTITY IF EXISTS;

-- ALTER TABLE

DROP TABLE IF EXISTS links;
CREATE TABLE links(
	link_id SERIAL PRIMARY KEY,
	title VARCHAR(512) NOT NULL,
	url VARCHAR(1024) NOT NULL	
);

ALTER TABLE links
ADD COLUMN active boolean;  

ALTER TABLE links
DROP COLUMN active;

ALTER TABLE links
RENAME COLUMN title TO link_title;

ALTER TABLE links
ADD COLUMN target VARCHAR(10);

ALTER TABLE links
ALTER COLUMN target
SET DEFAULT '_blank';

INSERT INTO links(link_title, url)
VALUES ('PostgreSQL Tutorial','https://www.postgresqltutorial.com/');

SELECT * FROM links;

ALTER TABLE links
ADD CHECK (target IN('_self', '_blank', '_parent', '_top'));

INSERT INTO links(link_title,url,target)
VALUES ('PostgreSQL','http://www.postgresql.org/','whatever');

ALTER TABLE links
ADD CONSTRAINT unique_url UNIQUE ( url );

INSERT INTO links(link_title, url)
VALUES ('PostgreSQL','https://www.postgresqltutorial.com/');

ALTER TABLE links
RENAME TO urls;

--Rename Table: A Step-by-Step Guide

DROP TABLE IF EXISTS vendors;
CREATE TABLE vendors(
	id SERIAL PRIMARY KEY,
	name VARCHAR NOT NULL
);

ALTER TABLE vendors RENAME TO suppliers;

CREATE TABLE supplier_groups(
	id SERIAL PRIMARY KEY,
	name VARCHAR NOT NULL
);

ALTER TABLE suppliers
ADD COLUMN group_id INT NOT NULL;

ALTER TABLE suppliers
ADD FOREIGN KEY (group_id) REFERENCES supplier_groups(id);

CREATE VIEW supplier_date
AS SELECT
	s.id,
	s.name,
	g.name supply_group
FROM suppliers s 
INNER JOIN supplier_groups g ON g.id = s.group_id;

ALTER TABLE supplier_groups RENAME TO groups;

